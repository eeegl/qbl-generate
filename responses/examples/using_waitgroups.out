---------- Generated from ../prompts/examples/using_waitgroups.in at 2024-03-06 00:18:59

### Knowledge Bank: 
WaitGroups in Golang are used to wait for a collection of goroutines to finish. By adding goroutines to the WaitGroup, we can synchronize their completion and ensure they all finish before proceeding. The WaitGroup has three main methods: `Add()`, `Done()`, and `Wait()`, used for adding goroutines, signaling the completion of a goroutine, and waiting for all goroutines to finish, respectively.

### Questions:
1. 
    What is the purpose of using a WaitGroup in Golang parallel programming?

    A) Ensures all goroutines are executed simultaneously  
    - Incorrect. Using a WaitGroup does not ensure simultaneous execution but synchronizes their completion.
    
    B) Synchronizes the completion of multiple goroutines  
    - Correct! WaitGroup is used to synchronize the completion of multiple goroutines before proceeding.
    
    C) Halts the execution of goroutines until a condition is met  
    - Incorrect. WaitGroup does not halt goroutine execution but allows waiting for their completion.

2. 
    Which method is used to indicate the completion of a goroutine in a WaitGroup?

    A) `Complete()`  
    - Incorrect. There is no `Complete()` method in WaitGroup; you should use `Done()` to signal completion.
    
    B) `Notify()`  
    - Incorrect. The `Notify()` method is not used with WaitGroup; use `Done()` to indicate completion.
    
    C) `Done()`  
    - Correct! The `Done()` method signals the completion of a goroutine in a WaitGroup.

3. 
    In the following Go code snippet, what is the missing key step required to ensure all goroutines finish execution using a WaitGroup?

    ```go
    func main() {
	    var wg sync.WaitGroup
	    for i := 0; i < 3; i++ {
		    wg.Add(1)
		    go func(id int) {
			    defer wg.Done()
			    fmt.Println("Goroutine", id, "completed.")
		    }(i)
	    }
	    // Missing step
    }
    ```

    A) Call `wg.Wait()` after the loop  
    - Correct! `wg.Wait()` is missing and is needed to wait for all added goroutines to finish.
    
    B) Add a delay using `time.Sleep()`  
    - Incorrect. Using `Sleep()` is a workaround but not the correct way to synchronize goroutines with WaitGroup.
    
    C) Call `wg.Reset()` at the end of the loop  
    - Incorrect. `wg.Reset()` is used to reuse the WaitGroup, not for waiting for goroutines to finish.

---------- Generated from ../prompts/examples/using_waitgroups.in at 2024-03-06 10:45:29

### Knowledge Bank:
- WaitGroups in Golang are used to synchronize goroutines by making the main goroutine wait until all other goroutines have finished executing.
- A WaitGroup must be declared using the `sync` package and then incremented before starting a goroutine. After the goroutine finishes, it should be decremented.
- The `Wait` method of a WaitGroup blocks until the WaitGroup counter goes back to zero, indicating that all goroutines have completed their execution.

### Questions:

MCQ 1. How can WaitGroups be used in Golang to synchronize the completion of multiple goroutines?

    A) By incrementing the WaitGroup before starting a goroutine and decrementing it after the goroutine finishes.
    - Correct! WaitGroups are effectively used by incrementing before and decrementing after the goroutine finishes to synchronize their completion.

    B) By printing the output of each goroutine to ensure synchronization.
    - Incorrect. Although printing output is common for debugging, WaitGroups are used for synchronization purposes.

    C) By using sleep statements in each goroutine to control the execution order.
    - Incorrect. Using sleep statements is not a best practice for synchronization, as it introduces unnecessary delays.

MCQ 2. Which method of a WaitGroup is used to block the main goroutine until all goroutines have finished?

    A) Wait()
    - Correct! The `Wait` method blocks until the WaitGroup counter reaches zero, indicating that all goroutines have completed.

    B) Release()
    - Incorrect. There is no `Release` method in WaitGroup. The correct method is `Wait` for blocking.

    C) Barrier()
    - Incorrect. There is no `Barrier` method in the WaitGroup; the correct one is `Wait` for synchronization.

MCQ 3. Consider the following Golang code snippet. What is the correct way to synchronize the completion of these goroutines using a WaitGroup?

```go
package main

import (
	"fmt"
	"sync"
)

func main() {
	var wg sync.WaitGroup

	for i := 0; i < 3; i++ {
		wg.Add(1)
		go func(num int) {
			defer wg.Done()
			fmt.Printf("Goroutine %d\n", num)
		}(i)
	}

	wg.Wait()
}
```

    A) Increment the WaitGroup inside the goroutine before the deferred call to Done().
    - Incorrect. Incrementing inside the goroutine can lead to race conditions. The correct way is to increment before starting the goroutine.

    B) Decrement the WaitGroup after the Println statement.
    - Incorrect. Decrementing should happen using `defer wg.Done()` to ensure it gets decremented after the goroutine finishes.

    C) Increment the WaitGroup before starting each goroutine and defer the Done() call inside the goroutine.
    - Correct! Incrementing before the goroutine starts and deferring the Done() call inside the goroutine is the correct way to synchronize using WaitGroups in Golang.

